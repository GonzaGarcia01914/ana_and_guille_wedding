                                    ),
                                  ),
                                  const SizedBox(height: 28),
                                  SectionCard(
                                    title: strings.rsvpTitle,
                                    icon: Icons.mark_email_read_outlined,
                                    child: Column(
                                      crossAxisAlignment:
                                          CrossAxisAlignment.start,
                                      children: [
                                        Wrap(
                                          spacing: 16,
                                          runSpacing: 16,
                                          children: [
                                            ElevatedButton.icon(
                                              onPressed: () => _openLink(
                                                context,
                                                whatsappUrl,
                                                strings.linkErrorMessage,
                                              ),
                                              style: ElevatedButton.styleFrom(
                                                elevation: 0,
                                              ),
                                              icon: const Icon(
                                                Icons.chat_bubble_outline,
                                              ),
                                              label: Text(
                                                strings.whatsappButtonLabel,
                                              ),
                                            ),
                                          ],
                                        ),
                                        const SizedBox(height: 24),
                                        _InfoRow(
                                          icon: Icons.style_outlined,
                                          label: strings.dressCodeLabel,
                                          value: strings.dressCode,
                                        ),
                                      ],
                                    ),
                                  ),
                                  const SizedBox(height: 28),
                                  _CountdownSection(
                                    countdown: _countdownNotifier,
                                    strings: strings,
                                  ),
                                  const SizedBox(height: 28),
                                  _Footer(details: details, strings: strings),
                                ],
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                  ),
                  Positioned(
                    top: 24,
                    right: isWide ? 32 : 16,
                    child: SafeArea(
                      child: Row(
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          _MuteToggleButton(
                            isMuted: _isAudioMuted,
                            onPressed: _toggleAudioMute,
                          ),
                          const SizedBox(width: 12),
                          _LanguageToggle(
                            selected: _locale,
                            onChanged: _switchLocale,
                          ),
                        ],
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
          if (!_introDismissed)
            Positioned.fill(
              child: AnimatedOpacity(
                opacity: _introOpacity,
                duration: const Duration(milliseconds: 420),
                curve: Curves.easeInOut,
                onEnd: () {
                  if (_introOpacity == 0 && !_introDismissed && mounted) {
                    setState(() {
                      _introDismissed = true;
                    });
                  }
                },
                child: IgnorePointer(
                  ignoring: _introOpacity == 0,
                  child: _IntroBloomOverlay(onOpened: _dismissIntroOverlay),
                ),
              ),
            ),
          if (_isLoading) const Positioned.fill(child: _LoadingOverlay()),
        ],
      ),
    );
  }
}

class _HeroOverlay extends StatefulWidget {
  const _HeroOverlay({
    required this.onScrollPromptTap,
    required this.scrollPromptLabel,
  });

  final VoidCallback onScrollPromptTap;
  final String scrollPromptLabel;

  @override
  State<_HeroOverlay> createState() => _HeroOverlayState();
}

class _HeroOverlayState extends State<_HeroOverlay>
    with SingleTickerProviderStateMixin {
  late final AnimationController _controller = AnimationController(
    vsync: this,
    duration: const Duration(milliseconds: 1100),
  )..repeat(reverse: true);

  late final Animation<double> _offset = Tween<double>(
    begin: -3.5,
    end: 3.5,
  ).animate(CurvedAnimation(parent: _controller, curve: Curves.easeInOutSine));

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final bool isWide = MediaQuery.of(context).size.width >= 720;
